[{"id":0,"href":"/curso_MBA/presentacion/","title":"Presentación","section":"","content":" Presentación # Proyecto I: \u0026ldquo;Modelación basada en agentes de sistemas sociales, ecológicos y socio-ecológicos\u0026rdquo; # La modelación basada en agentes es un paradigma de modelación que ha ganado mucha popularidad en diversas disciplinas como en las ciencias sociales, la ecología y la economía y ha sido central en el desarrollo de las ciencias de la complejidad. Esta aproximación de modelación que se ha hecho muy accesible gracias al crecimiento de la capacidad de cómputo y al rápido y activo desarrollo de herramientas de simulación.\nDada la flexibilidad y amplia gama de aplicabilidad del modelado basado en agentes, esta es una herramienta que facilita y promueve la investigación interdisciplinaria, por lo es una herramienta muy relevante para los estudiantes de matemáticas aplicadas. Este será un curso donde además de adquirir habilidades la modelación computacional se discutirán una gran diversidad de temas en ciencias sociales, ecología y sistemas socio-ecológicos. Asimismo los estudiantes podrán desarrollar sus habilidades en programación, análisis de datos, redacción escrita e investigación a traves del desarrollo de un proyecto de un tema de su elección.\nDinámica del curso # El curso constará de 4 tipos de sesiones:\nSesiones teóricas, en las que el docente expondrá un tema (asincrónicas: videos). Sesiones prácticas, en las que se programarán y analizarán modelos basados en agentes (en NetLogo, python y R) (asincrónicas: videos). En estas sesiones se aprenderán los fundamentos de distintas herramientas para simular modelos basados en agentes. Y se repoducirán los modelos y análisis de artículos discutidos. Sesiones de discusión, en las que se discutirán lecturas (artículos, capítulos de libro) (presenciales). Sesiones de asesoría, en las que se presentarán avances del proyecto y se dará retroalimentación y ayuda (presenciales y virtuales). Habrá un aula virutal de google classroom donde se entregarán actividades y se llevará el registro de calificaciones. Así mismo cada alumno deberá subir el su código de sus tareas y proyecto a un repositorio en linea (e.g., github, gitlab, sourcehut).\nEvaluación # La evaluación consistirá en:\n20% evidencias de lectura (e.g., resumenes, lista de ideas clave y/o preguntas) y participación en las sesiones de discusión. 30% tareas (de la parte teórica y práctica; se entregarán por moodle o github) 50% proyecto final (este consistirá en construir un modelo de agentes, hacer sus análisis y documentación, entregar un reporte escrito y presentarlo) Temario # Introducción al modelado basado en agentes # ¿Qué es el modelado basado en agentes? ¿Qué son los autómatas celulares? Historia del modelado basado en agentes y autómatas celulares Modelos de \u0026ldquo;top-down\u0026rdquo; y modelos \u0026ldquo;bottom-up\u0026rdquo; Modelos de agentes espacialmente explícitos y de redes Conceptos básicos del modelado multiagentes: agentes, reglas de comportamiento, propiedades emergentes Modelos simples vs modelos complicados Construcción de modelos basados en agentes # Conceptos de diseño de los modelos de agentes Herramientas para la simulación basada en agentes: NetLogo, Mesa, Agents.jl, Mason, Gama Platform, Cormas, Repast Implementación de modelos de agentes Documentación de modelos de agentes: protocolos ODD, ODD+D, TRACE, diagramas UML Verificación Análisis de modelos basados en agentes # Modelado basado en patrones Análisis de sensibilidad Validación Experimentación /in silico/ Análisis y visualización de resultados Limitaciones de los modelos basados en agentes Autómatas celulares # El juego de la vida Autómatas celulares en 1D Modelos de percolación Modelos basados en agentes de sistemas sociales # Modelos de segregación Modelos \u0026ldquo;Sugarspace\u0026rdquo; Modelo de polarización en redes sociales Modelos de difusión de información en redes Modelos basados en agentes de sistemas ecológicos # Modelos de dinámicas poblacionales espacialmente explícitos Modelos de movimiento y forrajeo animal Modelos de agentes y algoritmos genéticos Modelos basados en agentes de sistemas socio-ecológicos # Modelo de los arrozales en Bali Modelos de cambio de uso de suelo Modelos de manejo de recursos naturales y la tragedia de los comunes Modelos basados en agentes y sistemas de información geográfica Modelación participativa y juegos serios socio-ecológicos Bibliografía # Wilensky, U., \u0026amp; Rand, W. (2015). An introduction to agent-based modeling: Modeling natural, social, and engineered complex systems with NetLogo. The MIT Press. Railsback, S. F., \u0026amp; Grimm, V. (2019). Agent-based and individual-based modeling: A practical introduction (Second edition). Princeton University Press. Janssen, M. (2020). Introduction to Agent-based modeling: with applications to social, ecological and social-ecological systems. Arizona State University. Crooks, A., Malleson, N., Manley, E., \u0026amp; Heppenstall, A. J. (2019). Agent-based modelling \u0026amp; geographical information systems: A practical primer. SAGE. Abar, S., Theodoropoulos, G. K., Lemarinier, P., \u0026amp; O’Hare, G. M. P. (2017). Agent Based Modelling and Simulation tools: A review of the state-of-art software. Computer Science Review, 24, 13–33. https://doi.org/10.1016/j.cosrev.2017.03.001 Étienne, M. (Ed.). (2014). Companion Modelling: A Participatory Approach to Support Sustainable Development. Springer Netherlands. https://doi.org/10.1007/978-94-017-8557-0 Müller, B., Bohn, F., Dreßler, G., Groeneveld, J., Klassert, C., Martin, R., Schlüter, M., Schulze, J., Weise, H., \u0026amp; Schwarz, N. (2013). Describing human decisions in agent-based models – ODD + D, an extension of the ODD protocol. Environmental Modelling \u0026amp; Software, 48, 37–48. https://doi.org/10.1016/j.envsoft.2013.06.003 Sun, Z., Lorscheid, I., Millington, J. D., Lauf, S., Magliocca, N. R., Groeneveld, J., Balbi, S., Nolzen, H., Müller, B., Schulze, J., \u0026amp; Buchmann, C. M. (2016). Simple or complicated agent-based models? A complicated issue. Environmental Modelling \u0026amp; Software, 86, 56–67. https://doi.org/10.1016/j.envsoft.2016.09.006 Lansing, J. S., Thurner, S., Chung, N. N., Coudurier-Curveur, A., Karakaş, Ç., Fesenmyer, K. A., \u0026amp; Chew, L. Y. (2017). Adaptive self-organization of Bali’s ancient rice terraces. Proceedings of the National Academy of Sciences, 114(25), 6504–6509. https://doi.org/10.1073/pnas.1605369114 Törnberg, P. (2022). How digital media drive affective polarization through partisan sorting. Proceedings of the National Academy of Sciences, 119(42), e2207159119. https://doi.org/10.1073/pnas.2207159119 "},{"id":1,"href":"/curso_MBA/teoria_00/","title":"Teoría 0","section":"","content":" Teoría 0: Primera aproximacion a los modelos basados en agentes # Contenido: 3 videos, 1 modelo y 1 cuestionario\nDuración estimada: 40 minutos Introducción # En esta primera sesión teórica vamos a dar una primera explicación informal e intuitiva sobre los que son los modelos basados en agentes. Luego veremos cómo se ve un modelo basado en agenetes en acción, lo exploraremos y veremos que tipo de cosas nos pueden enseñar.\nIdea intuitiva de los modelos basados en agentes # Exploración de un MBA: Modelo de evacuación # Motivación y explicación # Exploración # Ahora vamos a explorar el modelo de evacuación. Puedes descargar el modelo desde aquí y abrirlo localmente con NetLogo (aquí puedes descargar NetLogo) o puedes explorarlo en directo en tu navegador con la aplicación web que está aquí abajo o puedes abrir la aplicación web en otra pestaña. Nota que la versión web de NetLogo es mucho más lenta que la versión de escritorio por lo que te recomendamos siempre usar la versión de escritorio. Además si estás en el navegador de tu celular el modelo correrá aún más lento.\nReflexiona\nAntes de explorar el modelo planteate tus hipótesis.\n¿Qué crees que pase con el tiempo de evacuación cuando aumentes el parámetro de agresividad (xi)? Explica por qué. ¿Qué crees que pase con el tiempo de evacuación cuando pongas un obstáculo enfrente de la salida? Explica por qué. Uso del modelo\nSelecciona el número de agentes que quieras simular (NUMERO_AGENTES) y la agresividad (xi). Da click en setup para inicializar la simulación. Da click en go para ejecutar la simulación Conclusiones # Cuestionario\nEsta sesión teórica tiene asociado un cuestionario que está disponible en el aula virtual del curso. "},{"id":2,"href":"/curso_MBA/practica_00/","title":"Práctica 0","section":"","content":" Práctica 0: Introducción a NetLogo, git y github # Contenido: 9 videos\nDuración estimada: 1 hora 20 minutos Introducción # En este curso vamos a estar usando NetLogo. NetLogo es una plataforma para hacer simulaciones computacionales que utiliza un lenguaje de programación muy sencillo que permite hacer modelos muy complejos de forma rápida. Así mismo, cuando uno crea un modelo con NetLogo también crea directamente una visualización. Esto permitie explorar de forma interactiva los distintos fenómenos de interés.\nEn esta primera práctica vamos a:\ninstalar NetLogo, ver qué es y cómo se usa, aprender los fundamentos del lenguaje, aprender sobre la historia de NetLogo, aprender sobre cómo usaremos git y de github para entregar las actividades de programación. Instalación de NetLogo # Puedes descargar NetLogo directo desde la página de descargas en el sitio oficial. Existen versiones para todos los sistemas operativos (Mac, Windows y Linux). El archivo que descargues debes poder abrirlo directamente y el progama se instalará en tu computadora (si estás en linux entonces debes extraer el archivo: tar -xf ARCHIVO.tgz, y luego correr el archivo ejecutable que se llama netlogo).\nVersión Web de NetLogo\nNetLogo también cuenta con una versión web. Esta versión puede ser muy conveniente ya que pueden ejecutar modelos incluso desde un teléfono móvil. Sin embargo, esta versión es más lenta y no incluye todas las opciones que la versión de escritorio. En el curso vamos a revisar solamente cómo usar la version de escritorio. Aunque en ocasiones usaremos la versión web pero solo para explorar modelos. ¿Qué es y cómo se usa NetLogo? # En este primer video mostramos qué es NetLogo y cómo se usa explorando un modelo de ejemplo.\nMaterial complementario\nSi les interesa saber más sobre los comportamientos colectivos de los animales pueden consultar los siguientes videos:\nVideo: Banadas de ESTORNINOS: así se explica uno de los más bellos espectáculos de la naturaleza Video: How do schools of fish siwm in harmony? Primeros pasos con NetLogo # En esta sección vamos a ver tres aspectos fundamentales de los modelos de NetLogo: las tortugas, los parches y los procedimientos.\nTortugas (parte 1) # Tortugas (parte 2) # Info\nAlgunos comandos vistos en el video tienen sinónimos para escribirlos de forma más rápida:\nforward se puede escribir como fd back se puede escribir como bk left se puede escribir como lt right se puede escribir como rt Parches # Procedimientos setup y go # Historia de NetLogo # Git y github # En el curso habrá actividades de programación y proponemos que las organicemos en un repositorio de git y lo alojemos en github. Para ello en el siguiente video se da una introducción a para qué sirven esos programas.\nInstalación de git # Git está disponible para todos los sistemas operativos. Puedes descargarlo desde la página oficial de Git. Te dejo un video mostrando cómo instalarlo en los distintos sistemas operativos:\nWindows Video de cómo instalar git en Windows MacOS Video de cómo instalar git en MacOS Linux Si usas linux entonces ya viene instalado por defecto y no tienes que hacer nada. Para probar tu instalación primero abre una terminal. En linux y mac busca y abre la aplicación que se llama \u0026ldquo;Terminal\u0026rdquo; y en Windows usa el programa \u0026ldquo;Powershell\u0026rdquo; o el programa \u0026ldquo;Git bash\u0026rdquo; que se debió instalar junto con git. No uses la terminal de windows \u0026ldquo;cmd\u0026rdquo; ya que los comandos no serán los mismos que usaremos en los videos.\nYa que abriste la terminal escribe el siguiente comando:\ngit --version y si te aparece algo como lo siguiente entonces se intaló bien:\ngit version 2.X.X Crea una cuenta de github # Crear y subir repositorios a github # En el último video de esta práctica se muestra cómo crear repositorios en github y localmente y el flujo básico de trabajo que estaremos siguiendo en el curso.\nLos comandos que te va a pedir git que configures la primera vez para que sepa tu nombre y correo que los uses son los siguientes:\ngit config --global user.name \u0026#34;[nombre]\u0026#34; git config --global user.email \u0026#34;[correo]\u0026#34; Aquí el resumen de los comandos de git que se ven en el video:\nComando Descripción git init Inicializar un repositorio en la carpeta actual git status Mostrar los cambios y el estado de los archivos git add . Preparar los archvios para el commit git commit -m \u0026quot;[mensaje descriptivo]\u0026quot; Hacer un commit git push origin main Enviar los cambios del repo local al repo de remoto (github) Para saber más\nAquí puedes aprender más sobre la sintaxis del lenguaje de marcado Markdown "},{"id":3,"href":"/curso_MBA/actividad_00/","title":"Actividad 0","section":"","content":" Actividad 0 # Fecha de entrega: 16/08/2024\nForma de entrega: repositorio de github Esta actividad está asociada a la Práctica 0.\nParte 1: Escribe tu nombre # En la primera parte de la actividad debes hacer un modelo de NetLogo con un botón que escriba tu nombre en el mundo.\nAbre un proyecto nuevo de NetLogo. En la pestaña de interfaz crea un botón \u0026ldquo;setup\u0026rdquo; En la pestaña de código agrega el siguiente procedimiento para tu botón setup (este código crea una tortuga creca de la esquina superior izquierda lista para dibujar cuando se mueva): to setup clear-all create-turtles 1 [ setxy -10 10 ;; \u0026lt;-- aquí puedes ajustar la posición inicial de la tortuga set heading 180 ;; \u0026lt;-- esto orienta a la tortuga para que mire hacia abajo pen-down ] end Introduciendo comandos en el Centro de comando (\u0026ldquo;Command center\u0026rdquo; en la pestaña de interfaz) haz que la tortuga se mueva de tal forma que escribas tu nombre. Usa los siguientes comandos:\nforward NUM o fd NUM (avanzar NUM pasos) back NUM o bk NUM (retroceder NUM pasos) right NUM o rt NUM (girar hacia la derecha NUM grados) left NUM o lt NUM (girar hacia la izquierda NUM grados) pen-down o pendown (bajar la pluma para trazar cuando la tortuga se mueve) pen-up o penup (levantar la pluma para dejar de trazar cuando la tortuga se mueve) cuando quieras reiniciar usa el botón \u0026ldquo;setup\u0026rdquo; o llama directamente al procedimiento en el centro de comando escribiendo setup. Por ejemplo el siguiente comando escribe \u0026ldquo;LU\u0026rdquo;:\nask turtles [ fd 10 lt 90 fd 5 penup fd 2 lt 90 fd 10 rt 180 pendown fd 10 lt 90 fd 5 lt 90 fd 10 ] Tips\n1. Construye el comando poco a poco, debes pensar en las intrucciones como si tú fueras la tortuga.\n2. Recuerda que cuando estás en el centro de comandos puedes acceder al comando previo usando la flecha hacia arriba de tu teclado, así ya no tienes que escribir tu comando desde cero. Además si no quieres andar picando el botón \u0026ldquo;setup\u0026rdquo; a cada rato puedes ponder el setup antes de tu comando: setup ask turtles [ INSTRUCCIONES ]. Cuando ya tengas tu comando listo crea un botón en la interfaz que se llame: escribir_nombre y en la pestaña de código agrega un procedimiento con el comando que construiste:\nto escribir_nombre AQUI VAN TUS COMANDOS end A NetLogo no le importan los saltos de línea, así que en la pestaña de código puedes poner cada comando en una línea individual para que sea más legible. Por ejemplo el comando que escribe \u0026ldquo;LU\u0026rdquo; que puse arriba es equivalente al siguiente que es mucho legible en la pestaña de código:\nask turtles [ fd 10 lt 90 fd 5 penup fd 2 lt 90 fd 10 rt 180 pendown fd 10 lt 90 fd 5 lt 90 fd 10 ] Guarda tu archivo como nombre.nlogo y agregálo a la carpeta actividad_00. Parte 2: Dibuja algo cool # En la segunda parte de la actividad debes crear un modelo de NetLogo que dibuje algo combinando los comandos que se ven en la práctica.\nAbre un proyecto nuevo de NetLogo. Crea un botón \u0026ldquo;setup\u0026rdquo; que inicialice tu modelo. En la pestaña de cógido crea el procedimiento setup. Aquí tu puedes crear las condiciones iniciales que tu quieras. Por ejemplo para crear varias tortugas listas para dibujar en posiciones aleatorias podrías usar el siguiente procedimiento: to setup clear-all create-turtles 50 [ setxy random-xcor random-ycor pendown ] end Crea un botón en la interfaz que se llame \u0026ldquo;dibujo\u0026rdquo;. Crea el procedimiento dibujo en la pestaña de código y pon tu código que genere un dibujo. Aquí hay unos ejemplos del tipo de dibujos que se pueden hacer para que te pongas creativo. Puedes buscar \u0026ldquo;turtles graphics programming\u0026rdquo; para buscar más ejemplos. Tip\nPara hacer patrones repetivios usa el comando repeat NUM [ COMANDO ]. Puedes meter un comando repeat dentro de otro para tener patrones interesantes. Guarda tu archivo como dibujo.nlogo y agregálo a la carpeta actividad_00. Entrega # Tu carpeta actividad_00 de esta actividad en el repositorio de github debe incluir:\nel archivo nombre.nlogo con tu ejercicio de la parte 1, y el archivo dibujo.nlogo con tu ejercicio de la parte 2 En el aula virtual solo debes poner el url de tu repositorio de github.\n"},{"id":4,"href":"/curso_MBA/teoria_01/","title":"Teoria 1","section":"","content":" Teoría 1: Introducción a los sistemas complejos # Contenido: 6 videos, 2 modelos y 1 cuestionario\nDuración estimada: 55 minutos Introducción # Los modelos basados en agentes son una herramienta que se enmarca dentro de los sistemas complejos. En esta sesión teórica vamos a discutir brevemente los orígenes de la pespectiva de las ciencias de la complejidad, explorar qué es un sistema complejo, repasar algunos conceptos relacionados a este tipo de sistemas y ver algunas de las propuestas de cómo se puede medir la complejidad.\nReduccionismo y ciencias de la complejidad # Sistemas complejos # Conceptos relacionados # Sistemas dinámicos, caos y no linealidad (parte 1) # Exploración modelo de los 3 cuerpos # Aquí puedes explorar el modelo de 2 y 3 cuerpos que se discute en el video. Puedes descargar el modelo desde aquí y abrirlo localmente con NetLogo, o explorarlo en el navegador con la aplicación web de abajo o abrir la aplicación web en otra pestaña. Aunque recuerda que en el navegador la simulación es mucho más lenta.\nUso del modelo\nSelecciona unas condiciones iniciales con los botones. Puedes modificar en las cajas de la derecha la posiciones y velocidades iniciales de los cuerpos (xn,, yn, vxn, vyn). Da click en setup para inicializar la simulación. Da click en go para ejecutar la simulación Para saber más\nSi quieres saber más sobre cómo funciona y cómo hacer este modelo puedes revisar la siguiente lista de videos. Sistemas dinámicos, caos y no linealidad (parte 2) # Exploración mapa logístico # Aquí puedes explorar el modelo del mapa logístico que se discute en el video. Puedes descargar el modelo desde aquí y abrirlo localmente con NetLogo, o explorarlo en el navegador con la aplicación web de abajo o abrir la aplicación web en otra pestaña.\nUso del modelo\nSelecciona valores para los parámetros R (tasa intrínseca de crecimiento), N0 (población incial) y K (capacidad de carga). Da click en setup para inicializar la simulación. Da click en go para ejecutar la simulación Para obtener el diagrama de bifurcación de manera automática da click en graficar mapa caos. Para que sea más rápida la expliración puedes apagar el dibujo de los conejos dibujar-poblacion? y subirle la velocidad con la perilla de velocidad. (En la aplicación web la imágen se ve hasta que termina de hacer la exploración. Propiedades emergentes y auto-organización # ¿Cómo medir la complejidad? # Cuestionario\nEsta sesión teórica tiene asociado un cuestionario está disponible en el aula virtual del curso. "},{"id":5,"href":"/curso_MBA/practica_01/","title":"Practica 1","section":"","content":" Práctica 1: Modelo de segregación de Schelling # Contenido: 7 videos\nDuración estimada: 45 minutos Introducción # En esta práctica vamos a construir el que por muchos es considerado como el primer modelo basado en agentes de la historia: el modelo de segregación de Schelling.\nMotivación # Explicación del modelo # Procedimiento setup (parte 1) # Procedimiento setup (parte 2) # Procedimiento go # Exploración # Explora el modelo\nModifica los parámetros de preferencia y densidad. ¿Qué patrón observas cuando subes el parámetro de preferencia? ¿Cómo cambia el patrón cuando bajas la preferencia? ¿Cómo afecta al modelo el parámetro de densidad? ¿Crees que existe algún punto crítico del la preferencia donde cambie el patrón que observas? ¿Sí si, en qué valor? Conclusión e historia # "},{"id":6,"href":"/curso_MBA/actividad_01/","title":"Actividad 1","section":"","content":" Actividad 1 # Fecha de entrega: 24/08/2024\nForma de entrega: repositorio de github Esta actividad está asociada a la Práctica 1.\nParte 1: Segregación de más de 2 grupos # En la Práctica 1 exploramos un modelo de segregación donde sólo hay 2 grupos. ¿Qué pasa cuando hay más de 2 grupos?\nCrea una copia de tu script del modelo de la práctica que se llame segregacion_multiples_grupos.nlogo. Modifica el código del modelo para que tengas más de 3 (o más grupos si quieres). Opcional: has que un usuario del modelo pueda seleccionar desde la interfaz el número de grupos que quiera. Es decir, agrega un slider con el que uno pueda seleccionar el número de grupos que se crean en el modelo y modifica el código para que este funcione. Tip\nPara ayudarte puedes consultar la documentación oficial de NetLogo. También puedes pedirle ayuda a chatgpt, aunque nota que no es tan chido con NetLogo como lo es con otros lenguajes de programación (ya que NetLogo no es muy popular no tiene mucho con qué aprender). Parte 2: Grupos con diferentes preferencias # En la Práctica 1 exploramos un modelo donde todos los agentes sin importar su grupo tienen la misma preferencia. Algunos estudios han documentados cómo en algunas regiones de Estados Unidos la población blanca tiene una mayor preferencia de vivir con otros blancos, mientras que la comunidad afro-americana tiene una preferencia menor por vivir con los de su mismo grupo. ¿Qué pasaría si cada en el modelo de Schelling le damos una preferencia diferente a cada grupo?\nCrea una copia de tu script del modelo de la práctica que se llame segregacion_diferentes_preferencias.nlogo (usa el modelo con solo 2 grupos, no el que hagas en la parte 1) Modifica el modelo para que cada grupo tenga una preferencia distinta. En lugar de tener un solo parámetro preferencia puedes crea: preferencia_1 y preferencia_2, que controlen la preferencia de cada grupo. Entrega # En tu repositorio crea una carpeta que se llame actividad_01. Esta carpeta debe incluir:\nel archivo segregacion_multiples_grupos.nlogo con tu ejercicio de la parte 1, y el archivo segregacion_diferentes_preferencias.nlogo con tu ejericio de la parte 2. Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\nEn el aula virtual solo debes poner el url de tu repositorio de github.\n"},{"id":7,"href":"/curso_MBA/teoria_02/","title":"Teoría 2","section":"","content":" Teoría 2: ¿Qué es la modelación basada en agentes? # Contenido: 6 videos, 1 modelo y 1 tarea\nDuración estimada: 55 minutos Introducción # En esta sesión vamos a ver con más detalle qué es la modelación basada en agentes. Para ello primero discutimos qué es un modelo, luego vemos algunas características de los modelos basados en agentes y discutimos cómo esta aproximación de modelación difiere de otras. Asi mismo mencionamos algunas de las herramientas que existen para construir modelos basados en agentes, discutimos cuál es el papel de la simulación en la construcción de la ciencia y finalmente hablamos de algunos de los múltiples orígenes de la modelación basada en agentes.\n¿Qué es un modelo? # Características de la modelación basada en agentes # Diferencias de la MBA y otras formas de modelación # Herramientas para construir MBA # Tres formas de hacer ciencia # Orígenes de la MBA # Tarea\nEsta sesión teórica tiene asociada una tarea que está disponible en el aula virtual del curso. "},{"id":8,"href":"/curso_MBA/practica_02/","title":"Práctica 2","section":"","content":" Práctica 2: Sincronización de luciérnagas # Contenido: 6 videos\nDuración estimada: 40 minutos Introducción # En esta práctica vamos a construir un modelo de sincronización de las luciérnagas. Este es un claro ejemplo de autoorganización, es decir, de cómo a partir de interacciones locales entre agentes puede surgir un patrón global, que en este caso es la sincronización.\nMotivación # Para saber más\nAquí puedes ver el video completo de \u0026ldquo;The Trials of Life - Talking to Strangers\u0026rdquo; donde se ven las imágenes de sincronización de luciérnagas. Explicación del modelo # Procedimiento setup # Procedimiento go (parte 1) # Procedimiento go (parte 2) # Exploración # Explora el modelo\nModifica los parámetros del modelo. ¿Con qué condiciones no se logra la sincronización? ¿Con qué condiciones se logra sincronizar más rápido al sistema? ¿Cuáles condiciones crees que sean las más realistas? Osciladores acoplados # "},{"id":9,"href":"/curso_MBA/actividad_02/","title":"Actividad 2","section":"","content":" Actividad 2 # Fecha de entrega: 31/08/2024\nForma de entrega: repositorio de github No se me ocurrió que poner de actividad para esta práctica :\u0026rsquo;( Así que como evidencia para esta actividad sólo debes subir tu código que hicieste de Práctica 2 a tu repositorio de github. Prometo para las siguientes prácticas hacer actividades más interesantes :(\nEntrega # En tu repositorio crea una carpeta que se llame actividad_02. Ensta carpeta debe incluir:\nel archivo sincronizacion_luciernagas.nlogo con tu código de la práctica 2. Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\n"},{"id":10,"href":"/curso_MBA/teoria_03/","title":"Teoría 3","section":"","content":" Teoría 3: Autómatas celulares # Contenido: 4 videos y 1 cuestionario\nDuración estimada: 35 minutos Introducción # En esta sesión vamos a ver qué son los autómatas celulares. Este es un tipo de modelos muy simples y que están muy relacionados a la modelación basada en agentes, además de presentar muchas de las propiedades de los sistemas complejos.\n¿Qué son los autómatas celulares? # El juego de la vida # Autómata celular elemental # Autómatas, sistemas complejos y cómputo # Cuestionario\nEsta sesión teórica tiene asociado un cuestionario está disponible en el aula virtual del curso. "},{"id":11,"href":"/curso_MBA/practica_03/","title":"Práctica 3","section":"","content":" Práctica 3: Juego de la vida y autómata elemental # Contenido: 7 videos\nDuración estimada: 56 minutos Introducción # En esta práctica vamos a implementar el juego de la vida y el autómata elemental en NetLogo.\nParte 1: Juego de la vida # Explicación del modelo # Implementación básica # Interactividad y visualización # Parte 2: Autómata elemental # Explicación del modelo # Procedimiento setup # Procedimiento go (parte 1) # Procedimiento go (parte 2) # "},{"id":12,"href":"/curso_MBA/actividad_03/","title":"Actividad 3","section":"","content":" Actividad 3 # Fecha de entrega: 14/09/2024\nForma de entrega: repositorio de github Esta actividad está asociada a la Práctica 3.\nParte 1: Otros autómatas celulares # Además del juego de la vida y del autómata celular elemental existen muchas otras relgas de autómatas celulares. Algunas reglas son pequeñas variaciones del juego de la vida, otras son reglas totalmente distintas y otros autómatas permiten más de 2 estados por celda. Con cada regla se pueden obtener comportamientos muy distintos.\nEn esta actividad debes elegir una regla de un autómata que sea distina al juego de la vida e implementarla en NetLogo.\nParte 2: Falling sand simulator # Dentro del género de juegos \u0026ldquo;sandbox\u0026rdquo; existe un subgénero que se llama \u0026ldquo;falling-sand games\u0026rdquo;. Estos juegos se caracterizan por tener un motor de juego que es un autómata celular. Por lo tanto, en estos juegos la física del juego está dada por las reglas que se le ponen al autómata celular. Un juego famoso de este género es Noitia, un roguelite. No obstante la mayoría de los \u0026ldquo;falling-sand games\u0026rdquo; son mundos libres, por ejemplo sandspile. Fíjate como en este juego puedes elegir \u0026ldquo;elementos\u0026rdquo; como arena, agua o fuego y ponerlos a interactuar. Las reglas que dictan como se comportan e interactuan los elementos son un autómata celular. Por ejemplo, las reglas del arena son algo así:\nSi yo soy una celda de tipo arena y la celda que tengo abajo es de tipo aire entonces intercambio mi tipo con la de abajo (la celda de abajo se hace arena y yo me hago aire). Esta regla permite simular la gravedad (aunque sin aceleración). Sin embargo, esta regla solita no es suficiente ya que obtenemos columnas rígidas de arena que no se caen. Para que obtener un comportamiento que eumula a una pila de arena debemos de agregar las siguientes dos reglas. Si la celda de abajo a la derecha es aire entonces intercambio mi tipo con ella (la celda de abajo a la derecha se hace arena y yo aire). Si la celda de abajo a la izquierda es aire entonces intercambio mi tipo con ella (la celda de abajo a la izquierda se hace arena y yo aire). Las últimas dos reglas que son iguales pueden ocurrir en cualquier orden o hacer que se intercambien de manera aleatoria.\nCon estas tres reglas sencillas podemos obtener una simulación básica del elemento arena. En sandspiel studio uno puede ver las reglas detrás de cada elemento en un editor muy amigable tipo \u0026ldquo;scratch\u0026rdquo; (asegurate de abrir el editor: \u0026ldquo;Open Editor\u0026rdquo;). En el editor puedes crear tus propias reglas.\nEl objetivo de esta práctica es que crees un autómata que se comporte como la \u0026ldquo;arena\u0026rdquo; (si quieres implementar otros elementos adelante, es un reto interesante).\nEntrega # En tu repositorio crea una carpeta que se llame actividad_03. Esta carpeta debe incluir:\nel archivo otro_automata.nlogo con la implementación del autómata celular que elegiste en la parte 1, y el archivo falling-sand.nlogo con la implementación de tu \u0026ldquo;falling sand simulator\u0026rdquo; de la parte 2 de la actividad. Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\nEn el aula virtual solo debes poner el url de tu repositorio de github.\n"},{"id":13,"href":"/curso_MBA/practica_04/","title":"Práctica 4","section":"","content":" Práctica 4: Ciclos intransitivos # Contenido: 9 videos\nDuración estimada: 1 hora 40 minutos Introducción # En esta práctica vamos ver cómo los modelos de autómatas se pueden aplicar para estudiar fenómenos ecológicos. En particular vamos a estudiar un sistema de competencia intransitiva. El ejemplo mejor conocido de este tipo de sistemas es el juego de «Piedra, papel o tijeras» (también conocido como modelo RSP, por sus siglas en ingles: Rock-Scissors-Paper).\nEn esta práctica primero como motivación repasamos algunos resultados básicos de los modelos de competencia en y el estudio de la coexsitencia entre especies en la ecología. Luego construimos un primer modelo estocástico básico de invasiones basado en el modelo RSP. Posteriormente modificamos nuestro modelo para integrar el efecto de la mobilidad y construir una vesión del modelo que se presenta en el artículo Mobility promotes and jeopardizes biodiversity in rock–paper–scissors games. Finalmente modificamos nuestro modelo para mejorar su eficiencia y hacer que evolucione más rápido.\nCompetencia y el Principio de exclusión competitiva # Aquí puedes explorar el modelo de competencia Lotka-Volterra. Puedes descargar el modelo desde aquí y abrirlo localmente con NetLogo, o explorarlo en el navegador con la aplicación web de abajo o abrir la aplicación web en otra pestaña.\nCiclos intransitivos y mobilidad # Parte 1: Modelo de invasión # Explicación del modelo # Implementación del modelo # Cuestionario\nEsta sesión práctica tiene asociado un cuestionario que está disponible en el aula virtual del curso. El cuestionario utiliza este modelo por lo que te conviene resolverlo antes de continuar con la práctica. Parte 2: Modelo de selección, reproducción y mobilidad # ¡Guarda una copia de tu modelo antes de continuar!\nAntes de continuar con la parte 2 guarda una copia de tu modelo de la parte 1 ya que ese modelo se usa en el cuestionario asociado a la prácitica y se pide que lo subas como evidencia en la Actividad asociada. Explicación del modelo # Implementación del modelo # Exploración del modelo # Explicación de como mejorar la eficiencia del modelo # Mejorar la eficiencia del modelo # Cuestionario\nEsta práctica tiene asociado un cuestionario está disponible en el aula virtual del curso. "},{"id":14,"href":"/curso_MBA/actividad_04/","title":"Actividad 4","section":"","content":" Actividad 4 # Fecha de entrega: 21/09/2024\nForma de entrega: repositorio de github Esta actividad está asociada a la Práctica 4.\nParte 1: Autómata piedra-papel-tijera # En esta práctica construimos una serie de autómatas celulares estocásticos basados en el modelo de piedra-papel-tijera aplicados al estudio de sistema ecológicos. Sin embargo nos faltó implementar el autómata celular en su forma determinista. En esta primera parte de la práctica debes implementarlo.\nHay varias versiones de este autómata, todas comparten el hecho de que hay un ciclo intransitivo (piedra le gana a tijera, tijera le gana a papel y papel a piedra). Crea un autómata donde el color de una celda dependa del número de vecinos que tiene del color que le gana. Por ejemplo, si rojo le gana a azul, azul a amarillo y amarillo a rojo y tu criterio de vecinos es 2, entonces en una iteración las celdas que sean azules y que tengan al menos 2 vecinos rojos deberán cambiar su color a rojo. Tu modelo debe incluir un parámetro que permita modificar el número de vecinos que usas como criterio.\nAdvetencia\nRecuerda que a diferencia de los modelos que implementamos en la práctica este es un autómata celular clásico con actualización sincrónica (todas las celdas se actualizan al mismo tiempo). Puedes repasar cómo funcionaba el juego de la vida que implementamos en la Práctica 3. Parte 2: Competencia intransitiva y mobilidad # Además del ejercicio de la parte 1 debes subir tu código que hiciste de la Práctica 4 como evidencia de que la realizaste.\nEntrega # En tu repositorio crea una carpeta que se llame actividad_03. Ensta carpeta debe incluir:\nel archivo automata_RSP.nlogo con ejercicio de la parte 1 de la actividad el archivo modelo_RSP_01.nlogo con tu código de la parte 1 de la práctica el archivo modelo_RSP_02.nlogo con tu código de la parte 2 de la prácitca Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\n"},{"id":15,"href":"/curso_MBA/pratica_05/","title":"Práctica 5","section":"","content":" Práctica 5: Teoría evolutiva de juegos # Contenido: 10 videos\nDuración estimada: 1 hora 40 minutos Introducción # En esta práctica vamos a construir dos modelos para estudiar algunos resultados básicos de la teoría evolutiva de juegos. En particular exploramos qué pasa con el famoso \u0026ldquo;dilema del prisionero\u0026rdquo; cuando lo estudiamos desde la perspectiva de la teoría evolutiva de juegos.\nEn esta práctica primero explicamos el \u0026ldquo;dilema del prisionero\u0026rdquo;, luego introducimos qué es la teoría evolutiva de juegos. Posteriormente consturimos dos modelos para de la teoría evolutiva de juegos, un primer modelo sin estructura espacial donde todos los jugadores interactuan con todos los otros jugadores y luego implementamos en su versión espacializada donde los jugadores solo interacutan con su localidad. Este modelo tiene propiedades muy interesantes.\nLos modelos que se consturen en esta práctica se presentan en las partes II y III del libro abierto y libre: «Agent-Based Evolutionary Game Dynamics».\nDilema del prisionero # Teoría evolutiva de juegos # Parte 1: Modelo de población bien mezcladas # Explicación del modelo # Procedimiento setup # Procedimiento go # Exploración del modelo # Explora el modelo\nUn juego clásico en la teoría evolutivas de juegos es el juego de la gallina o el juego del halcón y la paloma. Introduce una matríz de pagos que cumpla las condiciones de este juego y explora qué pasa. ¿Cuál es la estrategia evolutivamente estable para este juego? ¿La paloma (comportarse como \u0026ldquo;gallina\u0026rdquo;) o el halcón (\u0026ldquo;hacerse el valiente\u0026rdquo;)? Parte 2: Modelo con estructura espacial # Explicación del modelo # Procedimiento setup # Procedimiento go # Exploración del modelo # Para saber más\u0026hellip; Aquí puedes consultar el artículo que se menciona en el video. Cuestionario\nEsta práctica tiene asociado un cuestionario está disponible en el aula virtual del curso. "},{"id":16,"href":"/curso_MBA/actividad_05/","title":"Actividad 5","section":"","content":" Actividad 5 # Fecha de entrega: 29/09/2024\nForma de entrega: repositorio de github En esta actividad sólo debes subir a tu repositorio de github tu código que hiciste en la Práctica 5 como evidencia de que la realizaste.\nEntrega # En tu repositorio crea una carpeta que se llame actividad_05. Ensta carpeta debe incluir:\nel archivo teoria_evolutiva_de_juegos.nlogo con tu código de la parte 1 de la práctica 5. el archivo automata_dilema_prisionero.nlogo con tu código de la parte 2 de la práctica 5. Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\n"},{"id":17,"href":"/curso_MBA/practica_06/","title":"Práctica 6","section":"","content":" Práctica 6: Autoorganización de los arrozales de Bali # Contenido: 10 videos\nDuración estimada: 1 hora 52 minutos Introducción # En esta práctica vamos a ver una aplicación de un modelo de autómatas celulares para estudiar la autoorganización eun socio-ecosistema. En particular vamos a repoducir los resultados del artículo Adaptive self-organization of Bali’s ancient rice terraces que discutimos en clase.\nPrimero les dejo un video donde se explica el contexto del sistema que se estudia. Posteriormente reproducimos el modelo en NetLogo. Y finalmente analizamos los resultados del modelo en python para verificar que nuestro modelo reproduce sus resultados.\nLos arrozales en Bali # En este video Stephen Lansing, el auto principal del trabajo, explica el contexto de los arrozales de Bali. Así mismo presenta los resultados de un modelo basado en agentes publicado previamente en 1993.\nExplicación del modelo # Procedimiento setup # Procedimiento go # Mejorar la eficiencia del modelo # Exploración del modelo # Ley de potencias # Procesamiento de imágenes # Construcción de histogramas # Comparación con otros regímenes # Aquí puedes descargar el script que se utiliza en el video.\n"},{"id":18,"href":"/curso_MBA/actividad_06/","title":"Actividad 6","section":"","content":" Actividad 6 # Fecha de entrega: 12/10/2024 Forma de entrega: repositorio de github Esta actividad está asociada a la Práctica 5.\nParte 1: Comparar las distribuciones de distintos regímenes # En esta primera parte de la práctica debes crear las gráficas de las distribuciones para distintos parámetros como se muestra en la última parte de la práctica. Compara 5 imágenes distintas (intenta poner 2 del regimen que genera vecindades muy pequeñas, 2 del regimen de cuadrantes y una de la zona intermedia donde \\(20 a \\approx b\\) ). Modifica el código del script para cambiar el tamaño de la gráfica y que se vean bien las imágens. Tambien puedes cambiar a tu gusto la gráfica para enchularla. Para exportar tu imagen puedes usar el comando plt.imsave( ).\nParte 2: Implementa otras formas de decidir el itinerario # En la figura 3 del artículo se muestra una gráfica que compara la cosecha obtenida usando diferentes reglas para decidir el itinerario que se va a usar en la siguiente iteración. Las relgas de decision que comparan los autores son las siguentes:\nmáximo, una celda copia el itinerario de uno de sus cuatro vecinos que obtuvo la mayor cosecha (esta es la que implementamos en el modelo) aleatorio, una celda elige al azar uno de los 4 itinerario mayoría, una celda elige uno de los itinerarios que usan la mayoría de sus cuatro vecinos (e.g., si 3 vecinos son del itinerario rojo entonces les copia; si 2 son rojo y 2 verde elige uno al azar). minoría, una celda elige el itinerario que menos sea usado por sus cuatro vecinos (e.g., si 3 vecinos son del itinerario rojo entonces elijo uno de los otros 3 al azar; si 2 son verdes, 1 rojo y 1 amarillo, elijo azul, etc) En esta parte de la práctica debes implementar estas reglas de decision. Crea un \u0026ldquo;chooser\u0026rdquo; en la interaz para seleccionar la regla de decision como se muestra en la siguiente figura. También incluye una gráfica que muestre cómo cambia la cosecha promedio de las celdas \\(H\\) en el tiempo se muestra en la figura de abajo.\nTip\nRevisa la documentación de NetLogo. Puedes ayudarte de las siguientes funciones:\nmean modes Entrega # En tu repositorio crea una carpeta que se llame actividad_06. En esta carpeta debe incluir:\nla imagen comparacion_regimenes.png con el ejercicio de la parte 1 de la actividad el archivo modelo_arrozales_bali.nlogo con tu código de la parte 2 de la práctica Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push Con estos tres comandos tu repositorio de github se deberá actualizar.\n"},{"id":19,"href":"/curso_MBA/practica_07/","title":"Práctica 7","section":"","content":" Práctica 7: Polarización en redes sociales # Contenido: 9 videos\nDuración estimada: 1 hora 52 minutos Introducción # En esta práctica vamos a reporducir el modelo que se presenta en el artículo How digital media drive affective polarization through partisan sorting, el cual discutimos en clase.\nPrimero les dejo (de nuevo) un video que resume las ideas principales de cómo surge la polarización en las redes sociales. Posteriormente implementamos el modelo en NetLogo. Después hacemos experimentos y generamos datos de nuestro modelo usando el Behaviour Space de Netlogo. Finalmente analizamos esos datos para reproducir los principales resultados de los autores.\nLa polarización y las redes sociales # En este video se resumen algunas de las hipótesis que los sociólogos han desarrollado para explicar cómo surge la polarización.\nExplicación del modelo # Procedimiento setup (parte 1) # Procedimiento setup (parte 2) # Procedimiento go # Exploración del modelo # Gráfica de polarización # Experimentos en Behavior Space # Análisis de datos # Análisis de la dinámica # Aquí puedes descargar el script que se utiliza en el video.\n"},{"id":20,"href":"/curso_MBA/actividad_07/","title":"Actividad 7","section":"","content":" Actividad 7 # Fecha de entrega: 19/10/2024 Forma de entrega: repositorio de github Esta actividad está asociada a la Práctica 6. La parte 2 de la actividad es opcional.\nParte 1: Explora otros modelos de redes # Las redes sociales en el mundo real no son como en una látice en la que todos tienen el mismo número de enlaces. Hay personas que son muy populares y entonces tienen muchos enlaces, mientras que hay otros que no tienen muchos conocidos y tienen pocos enlaces. En la figura 3 del artículo los autores exploran otros tipos de redes que no son látices. Exploran las redes aleatorias (una donde los enlaces se forman de manera aleatoria entre los nodos), la red libre de escala o de enlace preferencial (que tiene la propiedad de que su distribución de grado sigue una ley de potencias: \u0026ldquo;hay unos cuantos nodos con muchísimos enlaces, mientras que la mayoría tienen bien poquitos enlaces\u0026rdquo;) y otro modelo de red que genera clusters. ¿Los resultados del modelo son robustos al tipo de red que se usen?\nDescarga este modelo extendido que incluye un parámetro extra que se llama tipo_red que permite explorar 3 tipos de redes: \u0026ldquo;látice cuadrada\u0026rdquo;, \u0026ldquo;aleatoria\u0026rdquo; y \u0026ldquo;libre de escala\u0026rdquo;. Nota que con otros tipos de redes la posición espacial de los agentes ya no es relevante (lo importante son los enlaces). Diseña experimentos para comparar como la Psi cambia con esos 3 distintos tipos de red y generar algo similar a la figura 3 (nota que nosotros no implementamos el último tipo de redes que ellos usan). En esta parte de la actividad debes generar una figura con 3 páneles con los 3 tipos de red: \u0026ldquo;látice\u0026rdquo;, \u0026ldquo;aleatoria\u0026rdquo; y \u0026ldquo;libre de escala\u0026rdquo;, donde para cada uno se grafique la \\(\\Psi\\) (polarización) en función del parámetro \\(\\gamma\\) . Puedes hacer tu imagen con R o con python.\nTip\nPara que no se tarden mucho en correr tus experimentos:\ndeja un tamaño de mundo pequeño (un mundo de 15 x 15 es suficiente), no dejes que se alarguen mucho tus experimentos (e.g., con unas 20,000 o 50,000 iteraciones está bien) y calcula tu Psi solo al final del experimento, no explores intervalos de h muy grandes (con pasos de 0.2 es suficiente), y si decides hacer experimentos largos puedes dejar tu compu en la noche corriendolos solo que cuida que no se duerma tu compu porque netlogo también se duerme. Para saber más\nPara generar las redes con otras topologías usamos una extensión de NetLogo que se llama nw que incluye varias funciones para crear y analizar redes. Revisa el código para ver cómo funciona. Parte 2 (opcional): Reproduce la figura 6 del artículo # En la segunda parte de la práctica debes reproducir la figura 6 del artículo donde se explora la dinámica de 2 corridas una con interacción local y otra con interacciones globales pero con valores bajos de homofilia. Para ello debes diseñar el experimento en NetLogo y analizarlo usando el script que se usa en la última parte de la práctica. Ve los detalles del experimento en el pie de figura y en el texto.\nTip\nPuedes intentar hacer exactamente el mismo diseño experimental de los autores, usando el mismo número de agentes y tiempo (para cambiar el número de agentes tienes que cambiar en Settings el tamaño las coordenadas del mundo). Solo que si sigues el mismo diseño de los autores posiblemente se tarden mucho las corridas, así que mejor intentalo con un menor número de agentes como se hace en el video. Del tiempo también puedes usar rangos más pequeños como se hace en el video. Para exportar tu imagen puedes usar la función: ggsave( ) Entrega # En tu repositorio crea una carpeta que se llame actividad_07. Esta carpeta debe incluir:\nla imagen tipos_de_red.png con el ejercicio de la parte 1 de la actividad, el script tipos_de_red.R (o tipos_de_red.py si lo haces en python) con el script para hacer la figura de esta primera parte de la actividad. si decides hacer la parte 2 opcional incluye también la imagen dinamica_baja_homofilia.png con el ejercicio de la parte 2 de la actividad. Recuerda que para registrar tus cambios en el repositiorio de git y subirlo a github debes hacer los siguientes comandos desde la carpeta de tu repositorio\n# Agregar todos los cambios de mi repositorio a la zona \u0026#34;stage\u0026#34; git add . # Agegar los cambios al repositorio (hacer el \u0026#34;commit\u0026#34;) git commit -m \u0026#34;[un mensaje descriptivo]\u0026#34; # Subir los cambios al repositorio remoto (github) git push "},{"id":21,"href":"/curso_MBA/teoria_04/","title":"Teoria_04","section":"","content":" Teoría 4: Proceso de modelación # Contenido: 5 videos y 1 cuestionario\nDuración estimada: Introducción # En esta sesión vamos a discutir cómo es el proceso de consturir un modelo basado en agentes. Repasamos qué se debe hacer en cada parte del proceso y damos algunos ejemplos de cómo se ven en la práctica.\nDiseño e implementación # Verificación # Calibración # Validación y análisis # Reproducibilidad # Cuestionario\nEsta sesión teórica tiene asociado un cuestionario que está disponible en el aula virtual del curso. "}]